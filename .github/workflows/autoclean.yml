# This workflow automates the cleanup of old packages in the GitHub Container Registry.
# It is now configured to be triggered manually.

name: Package Cleanup

# The 'workflow_dispatch' event allows you to manually run the workflow.
# You will find a "Run workflow" button on the Actions page for this workflow.
on:
  workflow_dispatch:

# The workflow needs 'write' permissions on packages to delete them.
permissions:
  packages: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI and jq
        run: |
          # The gh CLI and jq are needed for this script.
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: Clean up all old package versions
        # We define environment variables here, but explicitly avoid passing GITHUB_TOKEN
        # to prevent conflicts with the gh auth login command.
        env:
          # The name of your GitHub organization or user account.
          GITHUB_OWNER: '8090nike'
        run: |
          # Log in to GitHub CLI using the PAT.
          # We pipe the token directly to the command to avoid the environment variable conflict.
          # echo "${{ secrets.PAT_WITH_DELETE_PACKAGES }}" | gh auth login --with-token
          echo "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" | gh auth login --with-token
          # Get a list of all packages in the organization/user account.
          # The `jq` command extracts just the package names.
          package_names=$(gh api --method GET -H "Accept: application/vnd.github.v3+json" /orgs/${{ env.GITHUB_OWNER }}/packages?package_type=container --jq '.[].name' -q)

          echo "Found packages: $package_names"
          
          # Loop through each package.
          for package_name in $package_names; do
            echo "Processing package: $package_name"

            # Get all versions for the current package, sorted by creation date.
            # This time, we get all versions *except* the most recent one.
            versions_to_delete=$(gh api --method GET -H "Accept: application/vnd.github.com.v3+json" /orgs/${{ env.GITHUB_OWNER }}/packages/container/${package_name}/versions --jq --raw-output \
              ". | sort_by(.created_at) | reverse | .[1:] | .[].id")

            if [ -z "$versions_to_delete" ]; then
              echo "No versions to delete for package: $package_name"
            else
              echo "Found versions to delete for $package_name: $versions_to_delete"
              
              # Loop through the version IDs to delete them one by one.
              for version_id in $versions_to_delete; do
                echo "Deleting version $version_id for $package_name"
                gh api --method DELETE -H "Accept: application/vnd.github.com.v3+json" /orgs/${{ env.GITHUB_OWNER }}/packages/container/${package_name}/versions/${version_id}
              done
            fi
            
          done
