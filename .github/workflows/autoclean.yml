# This workflow automates the cleanup of old packages in the GitHub Container Registry.
# It is scheduled to run daily at midnight UTC.

name: Package Cleanup

# The 'schedule' event uses cron syntax to trigger the workflow.
# The cron expression below means "at midnight (00:00) every day".
on:
  schedule:
    - cron: '0 0 * * *'

# The workflow needs 'write' permissions on packages to delete them.
permissions:
  packages: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          # Ensure the gh CLI is installed, as it's not always available by default.
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Clean up all old package versions
        env:
          # Your GitHub Personal Access Token (PAT) with `read:packages` and `delete:packages` scopes.
          # You should store this as a repository secret.
          GITHUB_TOKEN: ${{ secrets.PAT_WITH_DELETE_PACKAGES }}
          # The name of your GitHub organization or user account.
          GITHUB_OWNER: 'your-organization-name'
          # The number of recent versions to keep for each package.
          MIN_VERSIONS_TO_KEEP: 10
        run: |
          # Log in to GitHub CLI using the PAT.
          echo "$GITHUB_TOKEN" | gh auth login --with-token

          # Get a list of all packages in the organization/user account.
          # The `jq` command extracts just the package names.
          package_names=$(gh api --method GET -H "Accept: application/vnd.github.v3+json" /orgs/${{ env.GITHUB_OWNER }}/packages?package_type=container --jq '.[].name')

          echo "Found packages: $package_names"
          
          # Loop through each package.
          for package_name in $package_names; do
            echo "Processing package: $package_name"

            # Get all versions for the current package, sorted by creation date.
            # We'll get the ID and creation date for each version.
            versions_to_delete=$(gh api --method GET -H "Accept: application/vnd.github.v3+json" /orgs/${{ env.GITHUB_OWNER }}/packages/container/${package_name}/versions --jq --raw-output \
              ". | sort_by(.created_at) | reverse | .[${{ env.MIN_VERSIONS_TO_KEEP }}:] | .[].id")

            if [ -z "$versions_to_delete" ]; then
              echo "No versions to delete for package: $package_name"
            else
              echo "Found versions to delete for $package_name: $versions_to_delete"
              
              # Loop through the version IDs to delete them one by one.
              for version_id in $versions_to_delete; do
                echo "Deleting version $version_id for $package_name"
                gh api --method DELETE -H "Accept: application/vnd.github.v3+json" /orgs/${{ env.GITHUB_OWNER }}/packages/container/${package_name}/versions/${version_id}
              done
            fi
            
          done
